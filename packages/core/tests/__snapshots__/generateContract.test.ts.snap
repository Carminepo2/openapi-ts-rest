// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generateContract > should match snapshot for defibrillatori-example.yaml 1`] = `
"import { initContract } from "@ts-rest/core";
import { z } from "zod";

const c = initContract();

const Problem = z.object({
  detail: z
    .string()
    .max(4096)
    .regex(/^.{0,1024}$/)
    .optional(),
  instance: z.string().max(2048).url().optional(),
  status: z.number().int().gte(100).lt(600).optional(),
  title: z
    .string()
    .max(64)
    .regex(/^[ -~]{0,64}$/)
    .optional(),
  type: z.string().max(2048).url().optional().default("about:blank"),
});
const DefibrillatoreId = z
  .string()
  .min(36)
  .max(36)
  .regex(/[a-z0-9-]{36}/)
  .uuid();
const Defibrillatore = z.object({
  id: DefibrillatoreId,
  status: z.enum(["attivo", "non-attivo"]),
  gestore: z
    .string()
    .max(32)
    .regex(/[a-zA-Z0-9\\-_]+/),
});
const GeoJSONFeature = z.object({
  type: z.literal("Feature"),
  geometry: z.object({
    type: z.literal("Point"),
    coordinates: z.array(z.number().gte(-180).lte(180)).min(2).max(2),
  }),
});
const DefibrillatoreGeo = z.object({
  type: z.literal("Feature"),
  geometry: z.object({
    type: z.literal("Point"),
    coordinates: z.array(z.number().gte(-180).lte(180)).min(2).max(2),
  }),
  properties: Defibrillatore,
});
const DefibrillatoriGeo = z.object({
  type: z.literal("FeatureCollection"),
  features: z.array(DefibrillatoreGeo).min(0).max(1000),
});
const AreaAmministrativa = z
  .string()
  .min(2)
  .max(6)
  .regex(/[0-9]{2,6}/);
const Latitude = z.number().gte(-90).lte(90);
const Longitude = z.number().gte(-180).lte(180);

export const schemas = {
  Problem,
  DefibrillatoreId,
  Defibrillatore,
  GeoJSONFeature,
  DefibrillatoreGeo,
  DefibrillatoriGeo,
  AreaAmministrativa,
  Latitude,
  Longitude,
};

export const contract = c.router({
  mostraStatus: {
    method: "GET",
    path: "/status",
    summary: "Get status",
    responses: {
      200: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      403: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      405: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      409: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      415: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      500: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
    },
  },
  listaDefibrillatori: {
    method: "GET",
    path: "/defibrillatori",
    summary: "Elenca defibrillatori",
    query: z.object({
      codice_istat: z
        .string()
        .min(2)
        .max(6)
        .regex(/[0-9]{2,6}/)
        .optional(),
      lat: z.number().gte(-90).lte(90).optional(),
      lon: z.number().gte(-180).lte(180).optional(),
      radius: z.number().int().gte(0).lte(2000).optional().default(500),
    }),
    responses: {
      200: c.otherResponse({
        contentType: "application/geo+json",
        body: DefibrillatoriGeo,
      }),
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      403: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      405: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      409: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      415: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      500: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
    },
  },
  creaDefibrillatore: {
    method: "POST",
    path: "/defibrillatori",
    summary: "Aggiungi defibrillatore",
    body: DefibrillatoreGeo,
    contentType: "application/json",
    responses: {
      201: c.otherResponse({
        contentType: "application/geo+json",
        body: DefibrillatoreGeo,
      }),
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      403: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      405: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      409: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      415: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      500: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
    },
  },
  mostraDefibrillatore: {
    method: "GET",
    path: "/defibrillatori/:id",
    summary: "Elenca un defibrillatore",
    pathParams: z.object({
      id: z
        .string()
        .min(36)
        .max(36)
        .regex(/[a-z0-9-]{36}/)
        .uuid(),
    }),
    responses: {
      200: DefibrillatoreGeo,
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      403: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      405: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      409: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      415: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      500: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
    },
  },
  modificaDefibrillatore: {
    method: "PATCH",
    path: "/defibrillatori/:id",
    summary: "Aggiorna un defibrillatore",
    pathParams: z.object({
      id: z
        .string()
        .min(36)
        .max(36)
        .regex(/[a-z0-9-]{36}/)
        .uuid(),
    }),
    body: DefibrillatoreGeo,
    contentType: "application/json",
    responses: {
      200: c.otherResponse({
        contentType: "application/geo+json",
        body: DefibrillatoreGeo,
      }),
      403: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      405: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      409: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      415: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      500: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
    },
  },
  eliminaDefibrillatore: {
    method: "DELETE",
    path: "/defibrillatori/:id",
    summary: "Elimina un defibrillatore.",
    pathParams: z.object({
      id: z
        .string()
        .min(36)
        .max(36)
        .regex(/[a-z0-9-]{36}/)
        .uuid(),
    }),
    body: c.noBody(),
    responses: {
      204: c.noBody(),
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      403: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      405: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      409: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      415: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      500: c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
    },
  },
});
"
`;

exports[`generateContract > should match snapshot for developers-italia.oas.yaml 1`] = `
"import { initContract } from "@ts-rest/core";
import { z } from "zod";

const c = initContract();

const Software = z.object({
  id: z
    .string()
    .max(36)
    .regex(
      /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
    ),
  publiccodeYml: z.string().min(1).max(99999).regex(/.*/),
  url: z.string().min(1).max(255).url(),
  aliases: z.array(z.string().min(1).max(255).url()).min(1).max(255).optional(),
  active: z.boolean().optional().default(true),
  vitality: z.string().min(1).max(99999).regex(/.*/).optional().default("null"),
  createdAt: z.string().datetime({ offset: true }),
  updatedAt: z.string().datetime({ offset: true }),
});
const Publisher = z.object({
  id: z
    .string()
    .max(36)
    .regex(
      /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
    ),
  codeHosting: z
    .array(
      z.object({
        url: z.string().max(255).url(),
        group: z.boolean().optional().default(true),
        createdAt: z.string().datetime({ offset: true }),
        updatedAt: z.string().datetime({ offset: true }),
      }),
    )
    .min(1)
    .max(255),
  description: z.string().max(255).regex(/.*/),
  email: z.string().max(255).email().optional(),
  active: z.boolean().optional().default(true),
  alternativeId: z.string().max(255).regex(/.*/).optional(),
});
const Log = z.object({
  id: z
    .string()
    .max(36)
    .regex(
      /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
    ),
  createdAt: z.string().datetime({ offset: true }),
  updatedAt: z.string().datetime({ offset: true }),
  message: z.string().max(2048).regex(/.*/),
  entity: z.string().max(255).regex(/.*/).optional(),
});
const Links = z.object({
  prev: z.string().min(1).max(255).nullable(),
  next: z.string().min(1).max(255).nullable(),
});
const Error = z.object({
  title: z.string().max(255).regex(/.*/),
  detail: z.string().max(2048).regex(/.*/),
  status: z.number().int().gte(400).lte(499).optional(),
});
const ValidationError = z.object({
  title: z.string().max(255).regex(/.*/),
  detail: z.string().max(2048).regex(/.*/),
  status: z.number().int().gte(422).lte(422).optional(),
  validationErrors: z
    .array(
      z.object({
        field: z
          .string()
          .max(64)
          .regex(/[A-Za-z]{1,64}/),
        rule: z
          .string()
          .max(64)
          .regex(/[A-Za-z]{1,64}/),
        value: z.string().max(255).regex(/.*/),
      }),
    )
    .min(1)
    .max(10)
    .optional(),
});
const Webhook = z.object({
  id: z
    .string()
    .max(36)
    .regex(
      /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
    ),
  url: z.string().max(255).url(),
  secret: z.string().max(255).regex(/.*/).optional(),
  createdAt: z.string().datetime({ offset: true }),
  updatedAt: z.string().datetime({ offset: true }),
});

export const schemas = {
  Software,
  Publisher,
  Log,
  Links,
  Error,
  ValidationError,
  Webhook,
};

export const contract = c.router({
  showStatus: {
    method: "GET",
    path: "/status",
    summary: "Get the API status",
    responses: {
      204: c.noBody(),
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      422: c.otherResponse({
        contentType: "application/problem+json",
        body: ValidationError,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  listSoftware: {
    method: "GET",
    path: "/software",
    summary: "List all software",
    query: z.object({
      all: z.boolean().optional().default(false),
      url: z.string().min(1).max(255).regex(/.*/).optional(),
      "page[size]": z.number().int().gte(1).lte(100).optional().default(25),
      "page[before]": z.string().min(1).max(255).regex(/.*/).optional(),
      "page[after]": z.string().min(1).max(255).regex(/.*/).optional(),
      from: z.string().datetime({ offset: true }).optional(),
      to: z.string().datetime({ offset: true }).optional(),
    }),
    responses: {
      200: z.object({
        data: z.array(Software).min(0).max(100).optional(),
        links: Links.optional(),
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  createSoftware: {
    method: "POST",
    path: "/software",
    summary: "Create a new Software",
    body: Software,
    contentType: "application/json",
    responses: {
      200: Software,
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      422: c.otherResponse({
        contentType: "application/problem+json",
        body: ValidationError,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  showSoftwareSoftwareId: {
    method: "GET",
    path: "/software/:softwareId",
    summary: "Get a Software",
    pathParams: z.object({
      softwareId: z
        .string()
        .max(36)
        .regex(
          /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
        ),
    }),
    responses: {
      200: Software,
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  updateSoftwareSoftwareId: {
    method: "PATCH",
    path: "/software/:softwareId",
    summary: "Update a Software",
    pathParams: z.object({
      softwareId: z
        .string()
        .max(36)
        .regex(
          /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
        ),
    }),
    body: Software,
    contentType: "application/json",
    responses: {
      200: Software,
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      422: c.otherResponse({
        contentType: "application/problem+json",
        body: ValidationError,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  removeSoftwareSoftwareId: {
    method: "DELETE",
    path: "/software/:softwareId",
    summary: "Delete a Software",
    pathParams: z.object({
      softwareId: z
        .string()
        .max(36)
        .regex(
          /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
        ),
    }),
    body: c.noBody(),
    responses: {
      204: c.noBody(),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  listSoftwareSoftwareIdLogs: {
    method: "GET",
    path: "/software/:softwareId/logs",
    summary: "List all Logs for a Software",
    query: z.object({
      "page[size]": z.number().int().gte(1).lte(100).optional().default(25),
      "page[before]": z.string().max(255).regex(/.*/).optional(),
      "page[after]": z.string().max(255).regex(/.*/).optional(),
      from: z.string().datetime({ offset: true }).optional(),
      to: z.string().datetime({ offset: true }).optional(),
    }),
    pathParams: z.object({
      softwareId: z
        .string()
        .max(36)
        .regex(
          /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
        ),
    }),
    responses: {
      200: z.object({
        data: z.array(Log).min(0).max(100).optional(),
        links: Links.optional(),
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  createSoftwareSoftwareIdLogs: {
    method: "POST",
    path: "/software/:softwareId/logs",
    summary: "Create Logs for a Software",
    pathParams: z.object({
      softwareId: z
        .string()
        .max(36)
        .regex(
          /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
        ),
    }),
    body: Log,
    contentType: "application/json",
    responses: {
      204: c.noBody(),
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      422: c.otherResponse({
        contentType: "application/problem+json",
        body: ValidationError,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  listSoftwareWebhooks: {
    method: "GET",
    path: "/software/webhooks",
    summary: "List all Webhooks for Software",
    query: z.object({
      "page[size]": z.number().int().gte(1).lte(100).optional().default(25),
      "page[before]": z.string().max(255).regex(/.*/).optional(),
      "page[after]": z.string().max(255).regex(/.*/).optional(),
      from: z.string().datetime({ offset: true }).optional(),
      to: z.string().datetime({ offset: true }).optional(),
    }),
    responses: {
      200: z.object({
        data: z.array(Webhook).min(0).max(100).optional(),
        links: Links.optional(),
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  createSoftwareWebhooks: {
    method: "POST",
    path: "/software/webhooks",
    summary: "Create Webhook for Software",
    body: Webhook,
    contentType: "application/json",
    responses: {
      200: Webhook,
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      422: c.otherResponse({
        contentType: "application/problem+json",
        body: ValidationError,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  listSoftwareSoftwareIdWebhooks: {
    method: "GET",
    path: "/software/:softwareId/webhooks",
    summary: "List all Webhooks for a Software",
    query: z.object({
      "page[size]": z.number().int().gte(1).lte(100).optional().default(25),
      "page[before]": z.string().max(255).regex(/.*/).optional(),
      "page[after]": z.string().max(255).regex(/.*/).optional(),
      from: z.string().datetime({ offset: true }).optional(),
      to: z.string().datetime({ offset: true }).optional(),
    }),
    pathParams: z.object({
      softwareId: z
        .string()
        .max(36)
        .regex(
          /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
        ),
    }),
    responses: {
      200: z.object({
        data: z.array(Webhook).min(0).max(100).optional(),
        links: Links.optional(),
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  createSoftwareSoftwareIdWebhooks: {
    method: "POST",
    path: "/software/:softwareId/webhooks",
    summary: "Create Webhook for a Software",
    pathParams: z.object({
      softwareId: z
        .string()
        .max(36)
        .regex(
          /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
        ),
    }),
    body: Webhook,
    contentType: "application/json",
    responses: {
      200: Webhook,
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      422: c.otherResponse({
        contentType: "application/problem+json",
        body: ValidationError,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  listLogs: {
    method: "GET",
    path: "/logs",
    summary: "List all Logs",
    query: z.object({
      "page[size]": z.number().int().gte(1).lte(100).optional().default(25),
      "page[before]": z.string().max(255).regex(/.*/).optional(),
      "page[after]": z.string().max(255).regex(/.*/).optional(),
      from: z.string().datetime({ offset: true }).optional(),
      to: z.string().datetime({ offset: true }).optional(),
      search: z.string().max(255).optional(),
    }),
    responses: {
      200: z.object({
        data: z.array(Log).min(0).max(100).optional(),
        links: Links.optional(),
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  createLogs: {
    method: "POST",
    path: "/logs",
    summary: "Create Logs",
    body: Log,
    contentType: "application/json",
    responses: {
      200: Log,
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      422: c.otherResponse({
        contentType: "application/problem+json",
        body: ValidationError,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  listPublishers: {
    method: "GET",
    path: "/publishers",
    summary: "List all Publishers",
    query: z.object({
      all: z.boolean().optional().default(false),
      "page[size]": z.number().int().gte(1).lte(100).optional().default(25),
      "page[before]": z.string().max(255).regex(/.*/).optional(),
      "page[after]": z.string().max(255).regex(/.*/).optional(),
      from: z.string().datetime({ offset: true }).optional(),
      to: z.string().datetime({ offset: true }).optional(),
    }),
    responses: {
      200: z.object({
        data: z.array(Publisher).min(0).max(100).optional(),
        links: Links.optional(),
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  createPublisher: {
    method: "POST",
    path: "/publishers",
    summary: "Create a new Publisher",
    body: Publisher,
    contentType: "application/json",
    responses: {
      200: Publisher,
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      409: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      422: c.otherResponse({
        contentType: "application/problem+json",
        body: ValidationError,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  showPublisherPublisherId: {
    method: "GET",
    path: "/publishers/:publisherId",
    summary: "Get a Publisher",
    pathParams: z.object({
      publisherId: z
        .string()
        .max(36)
        .regex(
          /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
        ),
    }),
    responses: {
      200: Publisher,
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  updatePublisherPublisherId: {
    method: "PATCH",
    path: "/publishers/:publisherId",
    summary: "Update a Publisher",
    pathParams: z.object({
      publisherId: z
        .string()
        .max(36)
        .regex(
          /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
        ),
    }),
    body: Publisher,
    contentType: "application/json",
    responses: {
      200: Publisher,
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      422: c.otherResponse({
        contentType: "application/problem+json",
        body: ValidationError,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  removePublisherPublisherId: {
    method: "DELETE",
    path: "/publishers/:publisherId",
    summary: "Delete a Publisher",
    pathParams: z.object({
      publisherId: z
        .string()
        .max(36)
        .regex(
          /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
        ),
    }),
    body: c.noBody(),
    responses: {
      204: c.noBody(),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  listPublishersWebhooks: {
    method: "GET",
    path: "/publishers/webhooks",
    summary: "List all Webhooks for Publishers",
    query: z.object({
      "page[size]": z.number().int().gte(1).lte(100).optional().default(25),
      "page[before]": z.string().max(255).regex(/.*/).optional(),
      "page[after]": z.string().max(255).regex(/.*/).optional(),
      from: z.string().datetime({ offset: true }).optional(),
      to: z.string().datetime({ offset: true }).optional(),
    }),
    responses: {
      200: z.object({
        data: z.array(Webhook).min(0).max(100).optional(),
        links: Links.optional(),
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  createPublishersWebhooks: {
    method: "POST",
    path: "/publishers/webhooks",
    summary: "Create Webhook for Publishers",
    body: Webhook,
    contentType: "application/json",
    responses: {
      200: Webhook,
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      422: c.otherResponse({
        contentType: "application/problem+json",
        body: ValidationError,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  listPublishersPublisherIdWebhooks: {
    method: "GET",
    path: "/publishers/:publisherId/webhooks",
    summary: "List all Webhooks for a Publisher",
    query: z.object({
      "page[size]": z.number().int().gte(1).lte(100).optional().default(25),
      "page[before]": z.string().max(255).regex(/.*/).optional(),
      "page[after]": z.string().max(255).regex(/.*/).optional(),
      from: z.string().datetime({ offset: true }).optional(),
      to: z.string().datetime({ offset: true }).optional(),
    }),
    pathParams: z.object({
      publisherId: z
        .string()
        .max(36)
        .regex(
          /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
        ),
    }),
    responses: {
      200: z.object({
        data: z.array(Webhook).min(0).max(100).optional(),
        links: Links.optional(),
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  createPublishersPublisherIdWebhooks: {
    method: "POST",
    path: "/publishers/:publisherId/webhooks",
    summary: "Create Webhook for a Publisher",
    pathParams: z.object({
      publisherId: z
        .string()
        .max(36)
        .regex(
          /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
        ),
    }),
    body: Webhook,
    contentType: "application/json",
    responses: {
      200: Webhook,
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      422: c.otherResponse({
        contentType: "application/problem+json",
        body: ValidationError,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  showWebhookWebhookId: {
    method: "GET",
    path: "/webhooks/:webhookId",
    summary: "Get a Webhook",
    pathParams: z.object({
      webhookId: z
        .string()
        .max(36)
        .regex(
          /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
        ),
    }),
    responses: {
      200: Webhook,
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  updateWebhooksWebhookId: {
    method: "PATCH",
    path: "/webhooks/:webhookId",
    summary: "Update a Webhook",
    pathParams: z.object({
      webhookId: z
        .string()
        .max(36)
        .regex(
          /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
        ),
    }),
    body: Webhook,
    contentType: "application/json",
    responses: {
      200: Webhook,
      400: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      422: c.otherResponse({
        contentType: "application/problem+json",
        body: ValidationError,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
  removeWebhooksWebhookId: {
    method: "DELETE",
    path: "/webhooks/:webhookId",
    summary: "Delete a Webhook",
    pathParams: z.object({
      webhookId: z
        .string()
        .max(36)
        .regex(
          /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/,
        ),
    }),
    body: c.noBody(),
    responses: {
      204: c.noBody(),
      401: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      404: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
      429: c.otherResponse({
        contentType: "application/problem+json",
        body: Error,
      }),
    },
  },
});
"
`;

exports[`generateContract > should match snapshot for petstore.yaml 1`] = `
"import { initContract } from "@ts-rest/core";
import { z } from "zod";

const c = initContract();

const Pet = z
  .object({
    id: z.number().int(),
    name: z.string(),
    tag: z.string().optional(),
  })
  .passthrough();
const Pets = z.array(Pet).max(100);
const Error = z
  .object({ code: z.number().int(), message: z.string() })
  .passthrough();

export const schemas = { Pet, Pets, Error };

export const contract = c.router({
  listPets: {
    method: "GET",
    path: "/pets",
    summary: "List all pets",
    query: z.object({ limit: z.number().int().lte(100).optional() }),
    responses: {
      200: Pets,
      400: Error,
      401: Error,
      403: Error,
      404: Error,
      405: Error,
      409: Error,
      415: Error,
      500: Error,
    },
  },
  createPets: {
    method: "POST",
    path: "/pets",
    summary: "Create a pet",
    body: Pet,
    contentType: "application/json",
    responses: {
      201: c.noBody(),
      400: Error,
      401: Error,
      403: Error,
      404: Error,
      405: Error,
      409: Error,
      415: Error,
      500: Error,
    },
  },
  showPetById: {
    method: "GET",
    path: "/pets/:petId",
    summary: "Info for a specific pet",
    pathParams: z.object({ petId: z.string() }),
    responses: {
      200: Pet,
      400: Error,
      401: Error,
      403: Error,
      404: Error,
      405: Error,
      409: Error,
      415: Error,
      500: Error,
    },
  },
});
"
`;

exports[`generateContract > should match snapshot for petstore-expanded.yaml 1`] = `
"import { initContract } from "@ts-rest/core";
import { z } from "zod";

const c = initContract();

const NewPet = z
  .object({ name: z.string(), tag: z.string().optional() })
  .passthrough();
const Pet = NewPet.and(z.object({ id: z.number().int() }).passthrough());
const Error = z
  .object({ code: z.number().int(), message: z.string() })
  .passthrough();

export const schemas = { NewPet, Pet, Error };

export const contract = c.router({
  findPets: {
    method: "GET",
    path: "/pets",
    summary:
      "Returns all pets from the system that the user has access to\\nNam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.\\n\\nSed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.\\n",
    query: z.object({
      tags: z.array(z.string()).optional(),
      limit: z.number().int().optional(),
    }),
    responses: {
      200: z.array(Pet),
      400: Error,
      401: Error,
      403: Error,
      404: Error,
      405: Error,
      409: Error,
      415: Error,
      500: Error,
    },
  },
  addPet: {
    method: "POST",
    path: "/pets",
    summary: "Creates a new pet in the store. Duplicates are allowed",
    body: NewPet,
    contentType: "application/json",
    responses: {
      200: Pet,
      400: Error,
      401: Error,
      403: Error,
      404: Error,
      405: Error,
      409: Error,
      415: Error,
      500: Error,
    },
  },
  findPetById: {
    method: "GET",
    path: "/pets/:id",
    summary:
      "Returns a user based on a single ID, if the user does not have access to the pet",
    pathParams: z.object({ id: z.number().int() }),
    responses: {
      200: Pet,
      400: Error,
      401: Error,
      403: Error,
      404: Error,
      405: Error,
      409: Error,
      415: Error,
      500: Error,
    },
  },
  deletePet: {
    method: "DELETE",
    path: "/pets/:id",
    summary: "deletes a single pet based on the ID supplied",
    pathParams: z.object({ id: z.number().int() }),
    body: c.noBody(),
    responses: {
      204: c.noBody(),
      400: Error,
      401: Error,
      403: Error,
      404: Error,
      405: Error,
      409: Error,
      415: Error,
      500: Error,
    },
  },
});
"
`;

exports[`generateContract > should match snapshot for uspto.yaml 1`] = `
"import { initContract } from "@ts-rest/core";
import { z } from "zod";

const c = initContract();

const dataSetList = z
  .object({
    total: z.number().int().optional(),
    apis: z
      .array(
        z
          .object({
            apiKey: z.string().optional(),
            apiVersionNumber: z.string().optional(),
            apiUrl: z.string().optional(),
            apiDocumentationUrl: z.string().optional(),
          })
          .passthrough(),
      )
      .optional(),
  })
  .passthrough();

export const schemas = { dataSetList };

export const contract = c.router({
  listDataSets: {
    method: "GET",
    path: "/",
    summary: "List available data sets",
    responses: { 200: dataSetList },
  },
  listSearchableFields: {
    method: "GET",
    path: "/:dataset/:version/fields",
    summary:
      "Provides the general information about the API and the list of fields that can be used to query the dataset.",
    pathParams: z.object({ dataset: z.string(), version: z.string() }),
    responses: { 200: z.string(), 404: z.string() },
  },
  performSearch: {
    method: "POST",
    path: "/:dataset/:version/records",
    summary:
      "Provides search capability for the data set with the given search criteria.",
    pathParams: z.object({
      version: z.string().default("v1"),
      dataset: z.string().default("oa_citations"),
    }),
    body: z
      .object({
        criteria: z.string().default("*:*"),
        start: z.number().int().optional().default(0),
        rows: z.number().int().optional().default(100),
      })
      .passthrough(),
    contentType: "application/x-www-form-urlencoded",
    responses: {
      200: z.array(z.record(z.object({}).passthrough())),
      404: c.noBody(),
    },
  },
});
"
`;

exports[`generateContract > should match snapshot for without-exported-schemas.yaml 1`] = `
"import { initContract } from "@ts-rest/core";
import { z } from "zod";

const c = initContract();

export const contract = c.router({
  pushSignal: {
    method: "POST",
    path: "/push-signal",
    summary: "Push Signal",
    headers: z.object({ authorization: z.string() }),
    body: z
      .object({
        signalType: z.enum(["CREATE", "UPDATE", "DELETE", "SEEDUPDATE"]),
        objectId: z.string(),
        eserviceId: z.string(),
        signalId: z.number(),
      })
      .passthrough(),
    contentType: "application/json",
    responses: {
      200: z.object({ signalId: z.number() }).passthrough(),
      400: c.noBody(),
      401: c.noBody(),
      403: c.noBody(),
      429: c.noBody(),
    },
  },
});
"
`;
