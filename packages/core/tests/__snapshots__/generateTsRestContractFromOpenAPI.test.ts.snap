// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generateTsRestContractFromOpenAPI > should match snapshot for https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples/v3.0/petstore.yaml 1`] = `
"import { initContract } from "@ts-rest/core";
import { z } from "zod";

const c = initContract();

const Pet = z.object({
  id: z.number().int(),
  name: z.string(),
  tag: z.string().optional(),
});
const Pets = z.array(Pet).max(100);
const Error = z.object({ code: z.number().int(), message: z.string() });

export const schemas = { Pet, Pets, Error };

export const contract = c.router({
  listPets: {
    method: "GET",
    path: "/pets",
    summary: "List all pets",
    query: z.object({ limit: z.number().int().lte(100).optional() }),
    responses: {
      "200": Pets,
      "400": Error,
      "401": Error,
      "403": Error,
      "404": Error,
      "405": Error,
      "409": Error,
      "415": Error,
      "500": Error,
    },
  },
  createPets: {
    method: "POST",
    path: "/pets",
    summary: "Create a pet",
    body: Pet,
    contentType: "application/json",
    responses: {
      "201": z.void(),
      "400": Error,
      "401": Error,
      "403": Error,
      "404": Error,
      "405": Error,
      "409": Error,
      "415": Error,
      "500": Error,
    },
  },
  showPetById: {
    method: "GET",
    path: "/pets/:petId",
    summary: "Info for a specific pet",
    pathParams: z.object({ petId: z.string() }),
    responses: {
      "200": Pet,
      "400": Error,
      "401": Error,
      "403": Error,
      "404": Error,
      "405": Error,
      "409": Error,
      "415": Error,
      "500": Error,
    },
  },
});
"
`;

exports[`generateTsRestContractFromOpenAPI > should match snapshot for https://raw.githubusercontent.com/teamdigitale/api-openapi-samples/master/openapi-v3/defibrillatori-example.yaml 1`] = `
"import { initContract } from "@ts-rest/core";
import { z } from "zod";

const c = initContract();

const Problem = z.object({
  detail: z
    .string()
    .max(4096)
    .regex(/^.{0,1024}$/)
    .optional(),
  instance: z.string().max(2048).url().optional(),
  status: z.number().int().gte(100).lt(600).optional(),
  title: z
    .string()
    .max(64)
    .regex(/^[ -~]{0,64}$/)
    .optional(),
  type: z.string().max(2048).url().optional().default("about:blank"),
});
const DefibrillatoreId = z
  .string()
  .min(36)
  .max(36)
  .regex(/[a-z0-9-]{36}/)
  .uuid();
const Defibrillatore = z.object({
  id: DefibrillatoreId,
  status: z.enum(["attivo", "non-attivo"]),
  gestore: z
    .string()
    .max(32)
    .regex(/[a-zA-Z0-9\\-_]+/),
});
const GeoJSONFeature = z.object({
  type: z.literal("Feature"),
  geometry: z.object({
    type: z.literal("Point"),
    coordinates: z.array(z.number().gte(-180).lte(180)).min(2).max(2),
  }),
});
const DefibrillatoreGeo = z.object({
  type: z.literal("Feature"),
  geometry: z.object({
    type: z.literal("Point"),
    coordinates: z.array(z.number().gte(-180).lte(180)).min(2).max(2),
  }),
  properties: Defibrillatore,
});
const DefibrillatoriGeo = z.object({
  type: z.literal("FeatureCollection"),
  features: z.array(DefibrillatoreGeo).min(0).max(1000),
});
const AreaAmministrativa = z
  .string()
  .min(2)
  .max(6)
  .regex(/[0-9]{2,6}/);
const Latitude = z.number().gte(-90).lte(90);
const Longitude = z.number().gte(-180).lte(180);

export const schemas = {
  Problem,
  DefibrillatoreId,
  Defibrillatore,
  GeoJSONFeature,
  DefibrillatoreGeo,
  DefibrillatoriGeo,
  AreaAmministrativa,
  Latitude,
  Longitude,
};

export const contract = c.router({
  mostraStatus: {
    method: "GET",
    path: "/status",
    summary: "Get status",
    responses: {
      "200": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "400": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "401": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "403": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "404": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "405": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "409": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "415": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "500": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
    },
  },
  listaDefibrillatori: {
    method: "GET",
    path: "/defibrillatori",
    summary: "Elenca defibrillatori",
    query: z.object({
      codice_istat: z
        .string()
        .min(2)
        .max(6)
        .regex(/[0-9]{2,6}/)
        .optional(),
      lat: z.number().gte(-90).lte(90).optional(),
      lon: z.number().gte(-180).lte(180).optional(),
      radius: z.number().int().gte(0).lte(2000).optional().default(500),
    }),
    responses: {
      "200": c.otherResponse({
        contentType: "application/geo+json",
        body: DefibrillatoriGeo,
      }),
      "400": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "401": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "403": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "404": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "405": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "409": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "415": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "500": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
    },
  },
  creaDefibrillatore: {
    method: "POST",
    path: "/defibrillatori",
    summary: "Aggiungi defibrillatore",
    body: DefibrillatoreGeo,
    contentType: "application/json",
    responses: {
      "201": c.otherResponse({
        contentType: "application/geo+json",
        body: DefibrillatoreGeo,
      }),
      "400": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "401": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "403": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "404": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "405": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "409": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "415": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "500": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
    },
  },
  mostraDefibrillatore: {
    method: "GET",
    path: "/defibrillatori/:id",
    summary: "Elenca un defibrillatore",
    pathParams: z.object({
      id: z
        .string()
        .min(36)
        .max(36)
        .regex(/[a-z0-9-]{36}/)
        .uuid(),
    }),
    responses: {
      "200": DefibrillatoreGeo,
      "400": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "401": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "403": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "404": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "405": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "409": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "415": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "500": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
    },
  },
  modificaDefibrillatore: {
    method: "PATCH",
    path: "/defibrillatori/:id",
    summary: "Aggiorna un defibrillatore",
    pathParams: z.object({
      id: z
        .string()
        .min(36)
        .max(36)
        .regex(/[a-z0-9-]{36}/)
        .uuid(),
    }),
    body: DefibrillatoreGeo,
    contentType: "application/json",
    responses: {
      "200": c.otherResponse({
        contentType: "application/geo+json",
        body: DefibrillatoreGeo,
      }),
      "403": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "400": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "401": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "404": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "405": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "409": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "415": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "500": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
    },
  },
  eliminaDefibrillatore: {
    method: "DELETE",
    path: "/defibrillatori/:id",
    summary: "Elimina un defibrillatore.",
    pathParams: z.object({
      id: z
        .string()
        .min(36)
        .max(36)
        .regex(/[a-z0-9-]{36}/)
        .uuid(),
    }),
    body: z.void(),
    responses: {
      "204": z.void(),
      "400": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "401": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "403": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "404": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "405": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "409": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "415": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
      "500": c.otherResponse({
        contentType: "application/problem+json",
        body: Problem,
      }),
    },
  },
});
"
`;
